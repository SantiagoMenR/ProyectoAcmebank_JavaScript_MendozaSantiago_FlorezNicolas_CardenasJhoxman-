// Chatbot functionality
class BankingChatbot {
    constructor() {
        this.chatMessages = document.getElementById('chatMessages');
        this.messageInput = document.getElementById('messageInput');
        this.chatForm = document.getElementById('chatForm');
        this.chatToggle = document.getElementById('chatToggle');
        this.chatBadge = document.getElementById('chatBadge');
        
        this.conversationHistory = [];
        this.isTyping = false;
        
        this.initializeChat();
        this.setupEventListeners();
        this.populateInitialTime();
    }
    
    initializeChat() {
        // Initialize welcome message
        this.conversationHistory.push({
            type: 'bot',
            message: '¬°Hola! Soy tu asistente virtual de Banco Acme. ¬øEn qu√© puedo ayudarte hoy?',
            timestamp: new Date()
        });
    }
    
    setupEventListeners() {
        // Chat form submission
        this.chatForm.addEventListener('submit', (e) => {
            e.preventDefault();
            this.handleUserMessage();
        });
        
        // Enter key handling
        this.messageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                this.handleUserMessage();
            }
        });
        
        // Auto-resize input
        this.messageInput.addEventListener('input', () => {
            this.adjustInputHeight();
        });
    }
    
    populateInitialTime() {
        const initialTimeElement = document.getElementById('initialTime');
        if (initialTimeElement) {
            initialTimeElement.textContent = this.formatTime(new Date());
        }
    }
    
    handleUserMessage() {
        const message = this.messageInput.value.trim();
        if (!message || this.isTyping) return;
        
        // Add user message
        this.addMessage('user', message);
        this.messageInput.value = '';
        
        // Show typing indicator and process response
        this.showTypingIndicator();
        setTimeout(() => {
            this.processUserMessage(message);
        }, 1000 + Math.random() * 1000); // Random delay for realism
    }
    
    addMessage(type, message, showTime = true) {
        const messageElement = document.createElement('div');
        messageElement.className = `message ${type}-message`;
        
        const timestamp = new Date();
        
        messageElement.innerHTML = `
            <div class="message-avatar">
                <i class="fas ${type === 'bot' ? 'fa-robot' : 'fa-user'}"></i>
            </div>
            <div class="message-content">
                <p>${message}</p>
                ${showTime ? `<div class="message-time">
                    <span>${this.formatTime(timestamp)}</span>
                </div>` : ''}
            </div>
        `;
        
        this.chatMessages.appendChild(messageElement);
        this.scrollToBottom();
        
        // Add to conversation history
        this.conversationHistory.push({
            type,
            message,
            timestamp
        });
        
        // Update badge
        this.updateChatBadge();
    }
    
    showTypingIndicator() {
        this.isTyping = true;
        const typingElement = document.createElement('div');
        typingElement.className = 'message bot-message typing-indicator';
        typingElement.id = 'typingIndicator';
        
        typingElement.innerHTML = `
            <div class="message-avatar">
                <i class="fas fa-robot"></i>
            </div>
            <div class="message-content">
                <p>Escribiendo...</p>
                <div class="typing-dots">
                    <div class="typing-dot"></div>
                    <div class="typing-dot"></div>
                    <div class="typing-dot"></div>
                </div>
            </div>
        `;
        
        this.chatMessages.appendChild(typingElement);
        this.scrollToBottom();
    }
    
    hideTypingIndicator() {
        const typingElement = document.getElementById('typingIndicator');
        if (typingElement) {
            typingElement.remove();
        }
        this.isTyping = false;
    }
    
    processUserMessage(message) {
        this.hideTypingIndicator();
        
        const response = this.generateResponse(message.toLowerCase());
        this.addMessage('bot', response);
    }
    
    generateResponse(message) {
        // Banking-specific responses
        const responses = {
            // Greeting responses
            greeting: [
                'hola', 'buenos d√≠as', 'buenas tardes', 'buenas noches', 'saludos'
            ],
            
            // Account balance queries
            balance: [
                'saldo', 'balance', 'dinero', 'cuenta', 'cu√°nto tengo', 'disponible'
            ],
            
            // Transfer queries
            transfer: [
                'transferencia', 'enviar dinero', 'transferir', 'env√≠o', 'mandar dinero'
            ],
            
            // Service hours
            hours: [
                'horario', 'hora', 'atenci√≥n', 'servicio', 'abierto', 'cerrado'
            ],
            
            // Certificates
            certificate: [
                'certificado', 'constancia', 'documento', 'comprobante'
            ],
            
            // Services
            services: [
                'servicio', 'producto', 'oferta', 'qu√© pueden', 'opciones'
            ],
            
            // Support
            support: [
                'ayuda', 'soporte', 'problema', 'contacto', 'asistencia'
            ],
            
            // Cards
            cards: [
                'tarjeta', 'd√©bito', 'cr√©dito', 'pl√°stico'
            ],
            
            // Loans
            loans: [
                'pr√©stamo', 'cr√©dito', 'financiamiento', 'solicitar dinero'
            ],
            
            // Payments
            payments: [
                'pago', 'pagar', 'factura', 'servicio p√∫blico'
            ],
            
            // Security
            security: [
                'seguridad', 'clave', 'contrase√±a', 'bloquear', 'desbloquear'
            ]
        };
        
        // Check for greeting
        if (responses.greeting.some(word => message.includes(word))) {
            return this.getRandomResponse([
                '¬°Hola! ¬øEn qu√© puedo ayudarte con tus servicios bancarios?',
                '¬°Buenos d√≠as! Estoy aqu√≠ para asistirte con cualquier consulta bancaria.',
                '¬°Hola! Soy tu asistente virtual de Banco Acme. ¬øQu√© necesitas?'
            ]);
        }
        
        // Check for balance queries
        if (responses.balance.some(word => message.includes(word))) {
            return 'Para consultar tu saldo actual, puedes:\n\n‚Ä¢ Ingresar al sistema con tus credenciales\n‚Ä¢ Usar la secci√≥n "Resumen de Cuenta" en el dashboard\n‚Ä¢ Llamar a nuestra l√≠nea de atenci√≥n al cliente\n\n¬øNecesitas ayuda para acceder a tu cuenta?';
        }
        
        // Check for transfer queries
        if (responses.transfer.some(word => message.includes(word))) {
            return 'Para realizar transferencias puedes:\n\n‚Ä¢ Usar la opci√≥n "Consignaci√≥n Electr√≥nica" en el dashboard\n‚Ä¢ Transferir entre cuentas propias\n‚Ä¢ Enviar dinero a otras cuentas del mismo banco\n\nRecuerda que necesitas:\n‚úì N√∫mero de cuenta destino\n‚úì C√©dula del beneficiario\n‚úì Saldo suficiente en tu cuenta\n\n¬øTe gustar√≠a que te gu√≠e paso a paso?';
        }
        
        // Check for service hours
        if (responses.hours.some(word => message.includes(word))) {
            return 'Nuestros horarios de atenci√≥n son:\n\nüè¶ **Sucursales f√≠sicas:**\nLunes a Viernes: 8:00 AM - 4:00 PM\nS√°bados: 8:00 AM - 12:00 PM\n\nüíª **Banca en l√≠nea:**\nDisponible 24/7\n\nüìû **L√≠nea de atenci√≥n:**\nLunes a Domingo: 24 horas\nTel√©fono: 018000-123456\n\n¬øNecesitas direcciones de nuestras sucursales?';
        }
        
        // Check for certificates
        if (responses.certificate.some(word => message.includes(word))) {
            return 'Puedes solicitar los siguientes certificados:\n\nüìã **Certificados disponibles:**\n‚Ä¢ Certificado de cuenta corriente/ahorros\n‚Ä¢ Certificado de ingresos y retenciones\n‚Ä¢ Certificado de movimientos de cuenta\n‚Ä¢ Paz y salvo\n\nüìù **Proceso:**\n1. Accede a "Certificado Bancario" en el dashboard\n2. Selecciona el tipo de certificado\n3. Completa la informaci√≥n requerida\n4. Descarga tu certificado en PDF\n\n¬øQu√© tipo de certificado necesitas?';
        }
        
        // Check for services
        if (responses.services.some(word => message.includes(word))) {
            return 'Ofrecemos los siguientes servicios:\n\nüí≥ **Productos:**\n‚Ä¢ Cuentas de ahorro y corriente\n‚Ä¢ Tarjetas d√©bito y cr√©dito\n‚Ä¢ Pr√©stamos personales e hipotecarios\n‚Ä¢ CDT (Certificados de Dep√≥sito a T√©rmino)\n\nüíª **Servicios digitales:**\n‚Ä¢ Banca en l√≠nea\n‚Ä¢ Transferencias electr√≥nicas\n‚Ä¢ Pago de servicios p√∫blicos\n‚Ä¢ Consulta de movimientos\n\nüè¶ **Servicios adicionales:**\n‚Ä¢ Giros y remesas\n‚Ä¢ Cambio de divisas\n‚Ä¢ Cajas de seguridad\n\n¬øTe interesa informaci√≥n espec√≠fica sobre alg√∫n servicio?';
        }
        
        // Check for support
        if (responses.support.some(word => message.includes(word))) {
            return 'Estoy aqu√≠ para ayudarte. Puedes contactar nuestro soporte:\n\nüìû **L√≠nea de atenci√≥n:**\n‚Ä¢ Tel√©fono: 018000-123456\n‚Ä¢ WhatsApp: +57 300 123 4567\n‚Ä¢ Disponible 24/7\n\nüìß **Email:**\n‚Ä¢ soporte@bancoacme.com\n‚Ä¢ Respuesta en 24 horas\n\nüè¶ **Presencial:**\n‚Ä¢ Visita cualquiera de nuestras sucursales\n‚Ä¢ Lleva tu documento de identidad\n\nüí¨ **Chat:**\n‚Ä¢ Este asistente virtual\n‚Ä¢ Disponible siempre\n\n¬øEn qu√© espec√≠ficamente puedo ayudarte?';
        }
        
        // Check for cards
        if (responses.cards.some(word => message.includes(word))) {
            return 'Informaci√≥n sobre tarjetas:\n\nüí≥ **Tarjetas de d√©bito:**\n‚Ä¢ Vinculada a tu cuenta de ahorros\n‚Ä¢ Sin cuota de manejo\n‚Ä¢ Retiros en cajeros propios gratis\n\nüí≥ **Tarjetas de cr√©dito:**\n‚Ä¢ Diferentes tipos seg√∫n tu perfil\n‚Ä¢ Cupos desde $500.000\n‚Ä¢ Programa de puntos y beneficios\n\nüîí **Seguridad:**\n‚Ä¢ Chip y clave\n‚Ä¢ Notificaciones por SMS\n‚Ä¢ Bloqueo inmediato disponible\n\n¬øQu√© informaci√≥n espec√≠fica necesitas sobre las tarjetas?';
        }
        
        // Check for loans
        if (responses.loans.some(word => message.includes(word))) {
            return 'Opciones de cr√©dito disponibles:\n\nüí∞ **Pr√©stamos personales:**\n‚Ä¢ Hasta $50.000.000\n‚Ä¢ Tasas desde 1.2% mensual\n‚Ä¢ Plazos hasta 60 meses\n\nüè† **Cr√©dito hipotecario:**\n‚Ä¢ Hasta 80% del valor del inmueble\n‚Ä¢ Plazos hasta 20 a√±os\n‚Ä¢ Tasas preferenciales\n\nüöó **Cr√©dito vehicular:**\n‚Ä¢ Carros nuevos y usados\n‚Ä¢ Tasas especiales\n‚Ä¢ Plazos hasta 60 meses\n\nüìã **Requisitos generales:**\n‚Ä¢ C√©dula de ciudadan√≠a\n‚Ä¢ Comprobante de ingresos\n‚Ä¢ Referencias comerciales\n\n¬øTe interesa alg√∫n tipo de cr√©dito espec√≠fico?';
        }
        
        // Check for payments
        if (responses.payments.some(word => message.includes(word))) {
            return 'Puedes pagar servicios p√∫blicos de forma f√°cil:\n\n‚ö° **Servicios disponibles:**\n‚Ä¢ Energ√≠a el√©ctrica\n‚Ä¢ Agua y alcantarillado\n‚Ä¢ Gas natural\n‚Ä¢ Internet y telefon√≠a\n\nüíª **C√≥mo pagar:**\n1. Ve a "Pago de Servicios" en el dashboard\n2. Selecciona el tipo de servicio\n3. Ingresa la referencia de pago\n4. Confirma el valor\n5. Autoriza la transacci√≥n\n\nüí° **Ventajas:**\n‚Ä¢ Sin salir de casa\n‚Ä¢ Disponible 24/7\n‚Ä¢ Confirmaci√≥n inmediata\n‚Ä¢ Historial de pagos\n\n¬øNecesitas ayuda con alg√∫n pago espec√≠fico?';
        }
        
        // Check for security
        if (responses.security.some(word => message.includes(word))) {
            return 'Informaci√≥n de seguridad:\n\nüîê **Contrase√±as:**\n‚Ä¢ Cambia tu clave peri√≥dicamente\n‚Ä¢ Usa combinaci√≥n de letras, n√∫meros y s√≠mbolos\n‚Ä¢ No compartas tus credenciales\n\nüõ°Ô∏è **Protecci√≥n:**\n‚Ä¢ Nunca ingreses datos en links sospechosos\n‚Ä¢ Verifica siempre la URL del banco\n‚Ä¢ Cierra sesi√≥n despu√©s de usar\n\nüì± **En caso de problemas:**\n‚Ä¢ Bloquea tu cuenta inmediatamente\n‚Ä¢ Llama a: 018000-123456\n‚Ä¢ Reporta transacciones no autorizadas\n\nüö® **Emergencias:**\n‚Ä¢ L√≠nea disponible 24/7\n‚Ä¢ Bloqueo inmediato de productos\n‚Ä¢ Soporte especializado\n\n¬øTienes alguna preocupaci√≥n espec√≠fica de seguridad?';
        }
        
        // Check for thanks
        if (message.includes('gracias') || message.includes('muchas gracias')) {
            return this.getRandomResponse([
                '¬°De nada! Estoy aqu√≠ para ayudarte cuando lo necesites.',
                'Es un placer ayudarte. ¬øHay algo m√°s en lo que pueda asistirte?',
                '¬°Con gusto! Para eso estoy aqu√≠. ¬øNecesitas algo m√°s?'
            ]);
        }
        
        // Check for goodbye
        if (message.includes('adi√≥s') || message.includes('chao') || message.includes('hasta luego')) {
            return this.getRandomResponse([
                '¬°Hasta luego! Que tengas un excelente d√≠a.',
                'Nos vemos pronto. ¬°Gracias por usar Banco Acme!',
                '¬°Adi√≥s! Recuerda que estoy aqu√≠ 24/7 para ayudarte.'
            ]);
        }
        
        // Default response for unrecognized queries
        return 'No estoy seguro de haber entendido tu consulta. Puedo ayudarte con:\n\n‚Ä¢ Informaci√≥n sobre saldos y cuentas\n‚Ä¢ Transferencias y pagos\n‚Ä¢ Servicios bancarios\n‚Ä¢ Horarios de atenci√≥n\n‚Ä¢ Certificados y documentos\n‚Ä¢ Tarjetas y cr√©ditos\n‚Ä¢ Soporte t√©cnico\n\n¬øPodr√≠as ser m√°s espec√≠fico sobre lo que necesitas? O puedes usar los botones de consultas frecuentes arriba.';
    }
    
    getRandomResponse(responses) {
        return responses[Math.floor(Math.random() * responses.length)];
    }
    
    scrollToBottom() {
        this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
    }
    
    adjustInputHeight() {
        this.messageInput.style.height = 'auto';
        this.messageInput.style.height = this.messageInput.scrollHeight + 'px';
    }
    
    formatTime(date) {
        return date.toLocaleTimeString('es-CO', {
            hour: '2-digit',
            minute: '2-digit'
        });
    }
    
    updateChatBadge() {
        const unreadMessages = this.conversationHistory.filter(msg => msg.type === 'bot').length;
        this.chatBadge.textContent = unreadMessages;
    }
}

// Quick message functionality
function sendQuickMessage(message) {
    const chatbot = window.bankingChatbot;
    if (chatbot) {
        chatbot.messageInput.value = message;
        chatbot.handleUserMessage();
    }
}

// Chat reset functionality
function resetChat() {
    const chatMessages = document.getElementById('chatMessages');
    
    // Clear all messages except the initial welcome
    chatMessages.innerHTML = `
        <div class="message bot-message">
            <div class="message-avatar">
                <i class="fas fa-robot"></i>
            </div>
            <div class="message-content">
                <p>¬°Hola! Soy tu asistente virtual de Banco Acme. ¬øEn qu√© puedo ayudarte hoy?</p>
                <div class="message-time">
                    <span>${new Date().toLocaleTimeString('es-CO', {
                        hour: '2-digit',
                        minute: '2-digit'
                    })}</span>
                </div>
            </div>
        </div>
    `;
    
    // Reset conversation history
    window.bankingChatbot.conversationHistory = [{
        type: 'bot',
        message: '¬°Hola! Soy tu asistente virtual de Banco Acme. ¬øEn qu√© puedo ayudarte hoy?',
        timestamp: new Date()
    }];
    
    // Reset badge
    window.bankingChatbot.updateChatBadge();
    
    // Clear input
    window.bankingChatbot.messageInput.value = '';
}

// Toggle chat visibility (for integration with dashboard)
function toggleChat() {
    const chatModal = document.getElementById('chatModal');
    const chatToggle = document.getElementById('chatToggle');
    
    if (chatModal && chatToggle) {
        if (chatModal.classList.contains('active')) {
            chatModal.classList.remove('active');
            chatToggle.style.display = 'flex';
        } else {
            chatModal.classList.add('active');
            chatToggle.style.display = 'none';
            // Focus on input when opening chat
            setTimeout(() => {
                const messageInput = document.getElementById('messageInput');
                if (messageInput) {
                    messageInput.focus();
                }
            }, 300);
        }
    }
}

// Initialize chatbot when DOM is ready
document.addEventListener('DOMContentLoaded', function() {
    if (!window.bankingChatbot) {
        window.bankingChatbot = new BankingChatbot();
    }
});
